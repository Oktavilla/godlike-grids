@import "reset";

$supportsNthChild: true !default;
$column-width: 6.25%;
$gutter-width: 2.08333333333%;
$total-width: 100%;
$columns: 12;

.grid-container {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}


@mixin grid($x: 1, $distribution: (), $units: $columns) {
  > .part {
    width: percentage((($column-width + $gutter-width) * ($columns/$x) - $gutter-width + ($gutter-width/$x)) / $total-width);
    margin: 0 percentage($gutter-width / $total-width) 0 0;
    float: left;
    @if $supportsNthChild == true {
      // Use nth-child
      &:nth-child(#{$x}n+#{$x}) {
        margin-right: 0;
      }
    }
    @else {
      // Use adjacent sibling selectors
      &#{nth-child($x)} {
        margin-right: 0;
      }
    }
    $i: 1;
    @each $y in $distribution {
      &:nth-child(n+#{$i}) {
        width: percentage((($column-width + $gutter-width) * $y - $gutter-width + ($gutter-width/$x)) / $total-width);
      }
      $i: $i + 1;
    }
  }
}


////////////////////////
// nth-child() support for IE 7 and 8
////////////////////////
@function nth-child($n) {

  // If a single number for nth.
  @if type-of($n) == number {
    $nth-child: first-child;
    @for $i from 2 through $n {
      $nth-child: append($nth-child, #{"+*"});
    }
    @return #{":"}$nth-child;
  }

  // If a nth-child string, need to parse the string.
  @else {
    $n: nth(children-of-ie-nth($n), 1);
    $nth-child: first-child;
    @for $i from 2 through $n {
      $nth-child: append($nth-child, #{"~*"});
    }
    @return #{":"}$nth-child;
  }
}