@import "reset";

$supportlegacyIE: false !default;
$responsive: true !default;

$column-width: 60px;
$gutter-width: 20px;
$total-width: 960px;
$columns: 12;

.part {
  padding: 0 $gutter-width 0 0;
  -webkit-box-sizing: border-box;
  float: left;
  clear: right;
}

.grid-container {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}


@mixin grid($x: 1, $distribution: (), $units: $columns) {
  > .part {
    @if $x > 1 {
      width: percentage((($column-width + $gutter-width) * ($columns/$x)) / $total-width);
      @if $supportlegacyIE == true {
        // Use adjacent sibling selectors
        &#{ie-every-nth-child($x, 10)} {
          padding-right: 0;
        }
      }
      @else {
        // Use nth-child
        &:nth-child(#{$x}n+#{$x}) {
          padding-right: 0;
        }
      }
      $i: 1;
      @each $y in $distribution {
        @if $supportlegacyIE == true {
          // Use adjacent sibling selectors
          &#{ie-nth-child($i)} {
            width: percentage((($column-width + $gutter-width) * $y) / $total-width);
          }
        }
        @else {
          // Use nth-child
          &:nth-child(n+#{$i}) {
            width: percentage((($column-width + $gutter-width) * $y) / $total-width);
          }
        }
        $i: $i + 1;
      }
    }
    @else {
      padding-right: 0;
      float: none;
    }
  }
}


@function ie-nth-child($n) {
  $nth-child: first-child;
  @for $i from 2 through $n {
    $nth-child: append($nth-child, #{"+*"});
  }
  @return #{":"}$nth-child;
}
@function ie-every-nth-child($n, $rows) {
  $str: ie-nth-child($n);
  @for $m from 2 through $rows {
    $str: append($str, #{","} #{"&"}ie-nth-child($n*$m));
  }
  @return $str;
}